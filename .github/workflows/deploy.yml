name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # OIDC 인증을 위한 권한 추가
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Build JAR
        run: ./gradlew build

      - name: List all files in workspace
        run: |
          echo "=== 현재 디렉토리 확인 ==="
          pwd
          echo "=== 최상위 디렉토리 리스트 ==="
          ls -lah
          echo "=== 현재 경로 폴더 구조 확인 ==="
          ls -lah ./apps/user-app/build/libs
          echo "=== build 폴더 구조 확인 ==="
          ls -lah ./build/
          echo "=== build/libs 폴더 구조 확인 ==="
          ls -lah ./build/libs/

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::491085395207:role/github-action-role
          aws-region: ap-northeast-2

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

      - name: Terraform Init & Apply
        run: |
          terraform init
          terraform apply -auto-approve
        working-directory: ./terraform

      - name: Upload JAR to S3
        run: |
          aws s3 cp ./apps/user-app/build/libs/user-app-module.jar s3://deploy-s3-medalist/user-app-module.jar

      - name: Deploy JAR to EC2 via SSM
        run: |
          
          # 실행 중인 EC2 인스턴스 가져오기
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=AppServer" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text --region ap-northeast-2)

          echo "✅ Found EC2 Instance IDs: $INSTANCE_IDS"

          # SSM에 등록된 인스턴스 가져오기
          SSM_INSTANCE_IDS=$(aws ssm describe-instance-information \
            --query "InstanceInformationList[].InstanceId" \
            --output text --region ap-northeast-2)

          echo "✅ Found SSM Registered Instance IDs: $SSM_INSTANCE_IDS"
          $(echo aws ssm describe-instance-information --region ap-northeast-2)

          # EC2 인스턴스 ID와 SSM 등록된 ID 비교
          VALID_INSTANCE_IDS=$(echo "$INSTANCE_IDS" | tr '\t' '\n' | grep -Fxf <(echo "$SSM_INSTANCE_IDS" | tr '\t' '\n') | tr '\n' ',' | sed 's/,$//')

          if [[ -z "$VALID_INSTANCE_IDS" ]]; then
            echo "❌ No valid EC2 instances found for SSM command execution"
            exit 1
          fi

          echo "✅ Found EC2 Valid Instance IDs: $VALID_INSTANCE_IDS"

          # AWS SSM 명령 실행
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$VALID_INSTANCE_IDS" \
            --parameters 'commands=["aws s3 cp s3://deploy-s3-medalist/user-app-module.jar /home/ubuntu/user-app-module.jar", "sudo systemctl restart user-app-module"]' \
            --region ap-northeast-2